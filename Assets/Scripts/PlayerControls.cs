//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input Actions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""808da6fa-0ba7-4f47-863a-029a12bde0fd"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""b74ed26f-d7ca-459e-9cb9-0b9e72d2a7b6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Basic_Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2ec95632-2a62-4eff-a09b-44b986aaf85d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RunToggle"",
                    ""type"": ""Button"",
                    ""id"": ""0155c22c-c1db-4651-8ee3-9a4ff52058cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""2386ccbc-3e14-4f25-aa85-5d94d2e86fb6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d9bbe6b5-ead6-4cfb-87fa-e681132d9429"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""f890dbc0-eec8-4bf5-8da8-b65c92f695b2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""b8ca803f-7beb-4d13-b6bb-eb8e7b8b2849"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""10e032c3-2090-4ee7-b758-17142f72c04d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b78832b-87e1-4e42-97dd-8c6ca4230f1b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic_Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13ba080a-aebe-4540-a726-aba2a309617e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Walk = m_Main.FindAction("Walk", throwIfNotFound: true);
        m_Main_Basic_Attack = m_Main.FindAction("Basic_Attack", throwIfNotFound: true);
        m_Main_RunToggle = m_Main.FindAction("RunToggle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Walk;
    private readonly InputAction m_Main_Basic_Attack;
    private readonly InputAction m_Main_RunToggle;
    public struct MainActions
    {
        private @PlayerControls m_Wrapper;
        public MainActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_Main_Walk;
        public InputAction @Basic_Attack => m_Wrapper.m_Main_Basic_Attack;
        public InputAction @RunToggle => m_Wrapper.m_Main_RunToggle;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Walk.started -= m_Wrapper.m_MainActionsCallbackInterface.OnWalk;
                @Walk.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnWalk;
                @Walk.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnWalk;
                @Basic_Attack.started -= m_Wrapper.m_MainActionsCallbackInterface.OnBasic_Attack;
                @Basic_Attack.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnBasic_Attack;
                @Basic_Attack.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnBasic_Attack;
                @RunToggle.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRunToggle;
                @RunToggle.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRunToggle;
                @RunToggle.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRunToggle;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Walk.started += instance.OnWalk;
                @Walk.performed += instance.OnWalk;
                @Walk.canceled += instance.OnWalk;
                @Basic_Attack.started += instance.OnBasic_Attack;
                @Basic_Attack.performed += instance.OnBasic_Attack;
                @Basic_Attack.canceled += instance.OnBasic_Attack;
                @RunToggle.started += instance.OnRunToggle;
                @RunToggle.performed += instance.OnRunToggle;
                @RunToggle.canceled += instance.OnRunToggle;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnBasic_Attack(InputAction.CallbackContext context);
        void OnRunToggle(InputAction.CallbackContext context);
    }
}
